/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { IWarning } from "./components/common/types";
import { IMouseState } from "./components/base-timeline";
import { IMouseState as IMouseState1 } from "./components/base-timeline";
import { ITimeStepProps } from "./components/timeline/time-step/time-step";
import { ITimeStepProps as ITimeStepProps1 } from "./components/timeline/time-step/time-step";
export namespace Components {
    interface MoTimeline {
        "backward": () => Promise<void>;
        "constrainTimeline": boolean;
        "dateLabelFormat": string;
        "defaultTimestepState": string;
        "disablePlayButton": boolean;
        "forward": () => Promise<void>;
        "loadedTimesteps": any;
        "mobileTimelineBreakPoint": number;
        "mouseState": IMouseState;
        "play": (play?: any) => Promise<void>;
        "timeLineLabelFormat": string;
        "timeStepIndex": number;
        "timesteps": any;
        "timezone": string;
        "warnings": IWarning[];
    }
    interface MobileTimeline {
        "disableTimesteps": boolean;
        "loadedTimeStepMap": Map<number, string>;
        "timeStepIndex": any;
        "timeSteps": string[];
    }
    interface PlayButtons {
        "disablePlayButton": boolean;
        "playing": boolean;
    }
    interface TimeLine {
        "constrainTimeline": boolean;
        "disableTimesteps": boolean;
        "labelFormat": string;
        "loadedTimeStepMap": Map<number, string>;
        "mouseState": IMouseState;
        "timeStepIndex": number;
        "timeSteps": string[];
        "warnings": IWarning[];
    }
    interface TimeSlider {
        "constrainTimeline": boolean;
        "disableTimesteps": boolean;
        "loadedTimeStepMap": Map<number, string>;
        "mouseState": IMouseState;
        "timeStepIndex": number;
        "timeStepProperties": ITimeStepProps[];
        "timeSteps": string[];
    }
    interface TimeStep {
        "labelFormat": string;
        "timeData": ITimeStepProps;
    }
    interface TimelineWarnings {
        "firstTimeStep": string;
        "lastTimeStep": string;
        "warnings": IWarning[];
    }
}
declare global {
    interface HTMLMoTimelineElement extends Components.MoTimeline, HTMLStencilElement {
    }
    var HTMLMoTimelineElement: {
        prototype: HTMLMoTimelineElement;
        new (): HTMLMoTimelineElement;
    };
    interface HTMLMobileTimelineElement extends Components.MobileTimeline, HTMLStencilElement {
    }
    var HTMLMobileTimelineElement: {
        prototype: HTMLMobileTimelineElement;
        new (): HTMLMobileTimelineElement;
    };
    interface HTMLPlayButtonsElement extends Components.PlayButtons, HTMLStencilElement {
    }
    var HTMLPlayButtonsElement: {
        prototype: HTMLPlayButtonsElement;
        new (): HTMLPlayButtonsElement;
    };
    interface HTMLTimeLineElement extends Components.TimeLine, HTMLStencilElement {
    }
    var HTMLTimeLineElement: {
        prototype: HTMLTimeLineElement;
        new (): HTMLTimeLineElement;
    };
    interface HTMLTimeSliderElement extends Components.TimeSlider, HTMLStencilElement {
    }
    var HTMLTimeSliderElement: {
        prototype: HTMLTimeSliderElement;
        new (): HTMLTimeSliderElement;
    };
    interface HTMLTimeStepElement extends Components.TimeStep, HTMLStencilElement {
    }
    var HTMLTimeStepElement: {
        prototype: HTMLTimeStepElement;
        new (): HTMLTimeStepElement;
    };
    interface HTMLTimelineWarningsElement extends Components.TimelineWarnings, HTMLStencilElement {
    }
    var HTMLTimelineWarningsElement: {
        prototype: HTMLTimelineWarningsElement;
        new (): HTMLTimelineWarningsElement;
    };
    interface HTMLElementTagNameMap {
        "mo-timeline": HTMLMoTimelineElement;
        "mobile-timeline": HTMLMobileTimelineElement;
        "play-buttons": HTMLPlayButtonsElement;
        "time-line": HTMLTimeLineElement;
        "time-slider": HTMLTimeSliderElement;
        "time-step": HTMLTimeStepElement;
        "timeline-warnings": HTMLTimelineWarningsElement;
    }
}
declare namespace LocalJSX {
    interface MoTimeline {
        "constrainTimeline"?: boolean;
        "dateLabelFormat"?: string;
        "defaultTimestepState"?: string;
        "disablePlayButton"?: boolean;
        "loadedTimesteps"?: any;
        "mobileTimelineBreakPoint"?: number;
        "mouseState"?: IMouseState;
        "onNewTimeStepSelected"?: (event: CustomEvent<any>) => void;
        "timeLineLabelFormat"?: string;
        "timeStepIndex"?: number;
        "timesteps"?: any;
        "timezone"?: string;
        "warnings"?: IWarning[];
    }
    interface MobileTimeline {
        "disableTimesteps"?: boolean;
        "loadedTimeStepMap"?: Map<number, string>;
        "onDateClicked"?: (event: CustomEvent<any>) => void;
        "onNewIndexSelected"?: (event: CustomEvent<any>) => void;
        "timeStepIndex"?: any;
        "timeSteps"?: string[];
    }
    interface PlayButtons {
        "disablePlayButton"?: boolean;
        "onBackClicked"?: (event: CustomEvent<any>) => void;
        "onForwardClicked"?: (event: CustomEvent<any>) => void;
        "onPlayPauseClicked"?: (event: CustomEvent<any>) => void;
        "playing"?: boolean;
    }
    interface TimeLine {
        "constrainTimeline"?: boolean;
        "disableTimesteps"?: boolean;
        "labelFormat"?: string;
        "loadedTimeStepMap"?: Map<number, string>;
        "mouseState"?: IMouseState;
        "timeStepIndex"?: number;
        "timeSteps"?: string[];
        "warnings"?: IWarning[];
    }
    interface TimeSlider {
        "constrainTimeline"?: boolean;
        "disableTimesteps"?: boolean;
        "loadedTimeStepMap"?: Map<number, string>;
        "mouseState"?: IMouseState;
        "onConstraintChanged"?: (event: CustomEvent<any>) => void;
        "onDateClicked"?: (event: CustomEvent<any>) => void;
        "timeStepIndex"?: number;
        "timeStepProperties"?: ITimeStepProps[];
        "timeSteps"?: string[];
    }
    interface TimeStep {
        "labelFormat"?: string;
        "timeData"?: ITimeStepProps;
    }
    interface TimelineWarnings {
        "firstTimeStep"?: string;
        "lastTimeStep"?: string;
        "warnings"?: IWarning[];
    }
    interface IntrinsicElements {
        "mo-timeline": MoTimeline;
        "mobile-timeline": MobileTimeline;
        "play-buttons": PlayButtons;
        "time-line": TimeLine;
        "time-slider": TimeSlider;
        "time-step": TimeStep;
        "timeline-warnings": TimelineWarnings;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mo-timeline": LocalJSX.MoTimeline & JSXBase.HTMLAttributes<HTMLMoTimelineElement>;
            "mobile-timeline": LocalJSX.MobileTimeline & JSXBase.HTMLAttributes<HTMLMobileTimelineElement>;
            "play-buttons": LocalJSX.PlayButtons & JSXBase.HTMLAttributes<HTMLPlayButtonsElement>;
            "time-line": LocalJSX.TimeLine & JSXBase.HTMLAttributes<HTMLTimeLineElement>;
            "time-slider": LocalJSX.TimeSlider & JSXBase.HTMLAttributes<HTMLTimeSliderElement>;
            "time-step": LocalJSX.TimeStep & JSXBase.HTMLAttributes<HTMLTimeStepElement>;
            "timeline-warnings": LocalJSX.TimelineWarnings & JSXBase.HTMLAttributes<HTMLTimelineWarningsElement>;
        }
    }
}
